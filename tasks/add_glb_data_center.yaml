- name: Get the existing value of data center entry ({{ item.dc_name }}).
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoints.glb_dc }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: fad_glb_dc_existing_data
  delegate_to: localhost

- name: Print the existing value of data center entry ({{ item.dc_name }}).
  ansible.builtin.debug:
    var: fad_glb_dc_existing_data.json.payload
  delegate_to: localhost
  tags:
    - debug

- name: Write request body json tmp file ({{ item.dc_name }}).
  ansible.builtin.copy:
    content: |
      {
        "mkey": "{{ item.dc_name }}",
        "location": "{{ item.location }}"
      }
    dest: "/tmp/fad_glb_dc_{{ item.dc_name }}_request_body.json"
    mode: u+rw,g-rw,o-rw
  register: request_body
  delegate_to: localhost
  run_once: true

- name: Trying to create new data center entry ({{ item.dc_name }}).
  ansible.builtin.uri:
    method: POST
    url: "{{ fad_api_endpoints.glb_dc }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: "{{ lookup('ansible.builtin.file', request_body.dest) }}"
  register: fad_glb_dc_post_result
  delegate_to: localhost
  changed_when: "fad_glb_dc_post_result.json.payload == 0"
  failed_when: "fad_glb_dc_post_result.json.payload != -15 and fad_glb_dc_post_result.json.payload != 0"

- name: Update the data center entry if entry exist ({{ item.dc_name }}).
  ansible.builtin.uri:
    method: PUT
    url: "{{ fad_api_endpoints.glb_dc }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
    body: "{{ lookup('ansible.builtin.file', request_body.dest) }}"
  register: fad_glb_dc_put_result
  delegate_to: localhost
  #changed_when: "fad_glb_dc_new_data.json.payload == 0"
  failed_when: "fad_glb_dc_put_result.json.payload != -15 and fad_glb_dc_put_result.json.payload != 0"

- name: Check if the data center value has changed ({{ item.dc_name }}).
  ansible.builtin.uri:
    method: GET
    url: "{{ fad_api_endpoints.glb_dc }}"
    body_format: "{{ fad_api_uri_params.body_format }}"
    validate_certs: "{{ fad_api_uri_params.validate_certs }}"
    return_content: "{{ fad_api_uri_params.return_content }}"
    status_code: "{{ fad_api_uri_params.status_code }}"
    headers: "{{ fad_api_header }}"
  register: fad_glb_dc_new_data
  changed_when: "fad_glb_dc_new_data.json.payload != fad_glb_dc_existing_data.json.payload"
  delegate_to: localhost

- name: Print the existing value of data center entry ({{ item.dc_name }}).
  ansible.builtin.debug:
    var: fad_glb_dc_new_data.json
  delegate_to: localhost
  tags:
    - debug

- name: Include add GLB server task ({{ item.dc_name }}).
  ansible.builtin.include_tasks:  add_glb_servers.yaml
  loop: "{{ item.glb_servers }}"
  loop_control:
    loop_vars: glb_server